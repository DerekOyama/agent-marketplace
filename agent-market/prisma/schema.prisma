generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  creditBalanceCents  Int                    @default(1000)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  stripeConnectId     String?
  stripeConnectStatus String?
  stripeCustomerId    String?
  agents              Agent[]
  executions          AgentExecution[]
  logs                AgentLog[]
  agentRatings        AgentRating[]
  creditPurchases     CreditPurchase[]
  creditTransactions  CreditTransaction[]
  mandates            Mandate[]
  transactions        Transaction[]
  agentInteractions   UserAgentInteraction[]
  payouts             Payout[]
  earnings            AgentEarnings[]
}

model Agent {
  id                     String                 @id @default(cuid())
  name                   String
  description            String?
  runUrl                 String
  quoteUrl               String
  token                  String
  type                   String                 @default("legacy")
  n8nWorkflowId          String?
  n8nInstanceUrl         String?
  webhookUrl             String?
  triggerType            String?
  isActive               Boolean                @default(true)
  isHidden               Boolean                @default(false)
  isDeleted              Boolean                @default(false)
  metadata               Json?
  pricing                Json?
  stats                  Json?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  lastExecutedAt         DateTime?
  totalExecutions        Int                    @default(0)
  avgRating              Float?
  totalUsers             Int                    @default(0)
  inputSchema            Json?
  outputSchema           Json?
  ownerId                String?
  inputRequirements      String?
  pricePerExecutionCents Int?
  exampleInput           String?
  exampleOutput          String?
  owner                  User?                  @relation(fields: [ownerId], references: [id])
  executions             AgentExecution[]
  logs                   AgentLog[]
  metrics                AgentMetrics[]
  ratings                AgentRating[]
  transactions           Transaction[]
  userInteractions       UserAgentInteraction[]
  earnings               AgentEarnings[]

  @@index([ownerId])
}

model Mandate {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("active")
  rulesJson Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id                  String     @id @default(cuid())
  userId              String
  agentId             String
  amountCents         Int
  currency            String     @default("USD")
  status              String     @default("pending")
  stripePi            String?
  requestJson         Json?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  receiptJson         Json?
  platformFeeCents    Int        @default(0)
  sellerEarningsCents Int        @default(0)
  logs                AuditLog[]
  agent               Agent      @relation(fields: [agentId], references: [id])
  user                User       @relation(fields: [userId], references: [id])
}

model AuditLog {
  id          String      @id @default(cuid())
  txId        String
  actor       String
  createdAt   DateTime    @default(now())
  event       String
  payload     Json
  transaction Transaction @relation(fields: [txId], references: [id])
}

model AgentExecution {
  id                 String    @id @default(cuid())
  agentId            String
  userId             String
  executionId        String    @unique
  status             String
  duration           Int
  creditsConsumed    Int
  httpStatus         Int?
  errorCode          String?
  errorMessage       String?
  inputSize          Int?
  outputSize         Int?
  inputType          String?
  outputType         String?
  responseTime       Int?
  processingTime     Int?
  queueTime          Int?
  sessionId          String?
  userAgent          String?
  ipAddress          String?
  startedAt          DateTime  @default(now())
  completedAt        DateTime?
  createdAt          DateTime  @default(now())
  inputData          Json?
  outputData         Json?
  balanceAfterCents  Int?
  balanceBeforeCents Int?
  agent              Agent     @relation(fields: [agentId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@index([agentId, createdAt])
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([executionId])
}

model AgentMetrics {
  id                     String   @id @default(cuid())
  agentId                String
  date                   DateTime
  hour                   Int?
  totalExecutions        Int      @default(0)
  successfulExecutions   Int      @default(0)
  failedExecutions       Int      @default(0)
  timeoutExecutions      Int      @default(0)
  errorExecutions        Int      @default(0)
  avgDuration            Float?
  minDuration            Int?
  maxDuration            Int?
  p95Duration            Int?
  p99Duration            Int?
  uniqueUsers            Int      @default(0)
  totalCreditsConsumed   Int      @default(0)
  avgCreditsPerExecution Float?
  errorCounts            Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  agent                  Agent    @relation(fields: [agentId], references: [id])

  @@unique([agentId, date, hour])
  @@index([agentId, date])
  @@index([date])
}

model AgentLog {
  id          String   @id @default(cuid())
  executionId String
  agentId     String
  userId      String
  category    String
  level       String
  message     String
  context     Json?
  metadata    Json?
  timestamp   DateTime @default(now())
  agent       Agent    @relation(fields: [agentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([executionId])
  @@index([agentId, timestamp])
  @@index([category, level, timestamp])
}

model UserAgentInteraction {
  id                   String    @id @default(cuid())
  userId               String
  agentId              String
  totalExecutions      Int       @default(0)
  successfulExecutions Int       @default(0)
  lastExecutedAt       DateTime?
  firstExecutedAt      DateTime?
  isFavorite           Boolean   @default(false)
  rating               Int?
  feedback             String?
  avgExecutionsPerDay  Float?
  preferredTimeOfDay   Int?
  preferredDayOfWeek   Int?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  agent                Agent     @relation(fields: [agentId], references: [id])
  user                 User      @relation(fields: [userId], references: [id])

  @@unique([userId, agentId])
  @@index([userId, lastExecutedAt])
  @@index([agentId, totalExecutions])
}

model RequestLog {
  id             String   @id @default(cuid())
  traceId        String   @unique
  method         String
  url            String
  path           String
  userAgent      String?
  ipAddress      String?
  userId         String?
  sessionId      String?
  requestHeaders Json?
  requestBody    Json?
  requestSize    Int?
  responseStatus Int?
  responseBody   Json?
  responseSize   Int?
  duration       Int
  errorCode      String?
  errorMessage   String?
  timestamp      DateTime @default(now())
  agentId        String?
  executionId    String?

  @@index([traceId])
  @@index([method, path])
  @@index([userId, timestamp])
  @@index([errorCode, timestamp])
  @@index([timestamp])
  @@index([agentId, timestamp])
  @@index([executionId])
}

model AgentAuditLog {
  id         String   @id @default(cuid())
  agentId    String
  field      String
  oldValue   Json?
  newValue   Json?
  changedBy  String?
  changeType String
  timestamp  DateTime @default(now())
  reason     String?
  metadata   Json?

  @@index([agentId, timestamp])
  @@index([changedBy, timestamp])
  @@index([field, timestamp])
  @@index([timestamp])
}

model UserAuditLog {
  id         String   @id @default(cuid())
  userId     String
  field      String
  oldValue   Json?
  newValue   Json?
  changedBy  String?
  changeType String
  timestamp  DateTime @default(now())
  reason     String?
  metadata   Json?

  @@index([userId, timestamp])
  @@index([changedBy, timestamp])
  @@index([field, timestamp])
  @@index([timestamp])
}

model MandateAuditLog {
  id         String   @id @default(cuid())
  mandateId  String
  field      String
  oldValue   Json?
  newValue   Json?
  changedBy  String
  changeType String
  timestamp  DateTime @default(now())
  reason     String?
  metadata   Json?

  @@index([mandateId, timestamp])
  @@index([changedBy, timestamp])
  @@index([field, timestamp])
  @@index([timestamp])
}

model SystemErrors {
  id          String    @id @default(cuid())
  errorCode   String
  errorType   String
  severity    String
  component   String
  agentId     String?
  userId      String?
  executionId String?
  requestId   String?
  message     String
  details     Json?
  stackTrace  String?
  resolved    Boolean   @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  timestamp   DateTime  @default(now())

  @@index([errorCode, timestamp])
  @@index([errorType, timestamp])
  @@index([severity, timestamp])
  @@index([component, timestamp])
  @@index([agentId, timestamp])
  @@index([userId, timestamp])
  @@index([resolved, timestamp])
  @@index([timestamp])
}

model SystemMetrics {
  id        String   @id @default(cuid())
  metric    String
  value     Float
  component String
  unit      String?
  tags      Json?
  timestamp DateTime @default(now())

  @@index([metric, timestamp])
  @@index([component, timestamp])
  @@index([timestamp])
}

model CreditPurchase {
  id                      String              @id @default(cuid())
  userId                  String
  amountCents             Int
  creditsPurchased        Int
  currency                String              @default("usd")
  stripePaymentIntentId   String?
  stripeCheckoutSessionId String?
  status                  String              @default("pending")
  metadata                Json?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  completedAt             DateTime?
  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditTransactions      CreditTransaction[]

  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([stripePaymentIntentId])
  @@index([stripeCheckoutSessionId])
}

model CreditTransaction {
  id                 String          @id @default(cuid())
  userId             String
  amountCents        Int
  type               String
  description        String
  referenceId        String?
  referenceType      String?
  balanceBeforeCents Int
  balanceAfterCents  Int
  metadata           Json?
  createdAt          DateTime        @default(now())
  creditPurchaseId   String?
  creditPurchase     CreditPurchase? @relation(fields: [creditPurchaseId], references: [id])
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([referenceId, referenceType])
}

model AgentRating {
  id        String   @id @default(cuid())
  agentId   String
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agent     Agent    @relation(fields: [agentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([agentId, userId])
}

model AgentEarnings {
  id                String   @id @default(cuid())
  agentId           String
  userId            String
  totalEarningsCents Int      @default(0)
  pendingEarningsCents Int    @default(0)
  paidOutCents      Int      @default(0)
  totalExecutions   Int      @default(0)
  lastEarningAt     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  agent             Agent    @relation(fields: [agentId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([agentId, userId])
  @@index([userId, totalEarningsCents])
}

model Payout {
  id                String   @id @default(cuid())
  userId            String
  amountCents       Int
  currency          String   @default("USD")
  status            String   @default("pending") // pending, processing, completed, failed
  stripeTransferId  String?
  description       String?
  failureReason     String?
  processedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([status, createdAt])
}
