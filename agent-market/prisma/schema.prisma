generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                 String                 @id @default(cuid())
  email              String                 @unique
  creditBalanceCents Int                    @default(1000)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  executions         AgentExecution[]
  logs               AgentLog[]
  mandates           Mandate[]
  transactions       Transaction[]
  agentInteractions  UserAgentInteraction[]
}

model Agent {
  id               String                 @id @default(cuid())
  name             String
  description      String?
  runUrl           String
  quoteUrl         String
  token            String
  type             String                 @default("legacy")
  n8nWorkflowId    String?
  n8nInstanceUrl   String?
  webhookUrl       String?
  triggerType      String?
  isActive         Boolean                @default(true)
  metadata         Json?
  pricing          Json?
  stats            Json?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  lastExecutedAt   DateTime?
  totalExecutions  Int                    @default(0)
  avgRating        Float?
  totalUsers       Int                    @default(0)
  inputSchema      Json?
  outputSchema     Json?
  executions       AgentExecution[]
  logs             AgentLog[]
  metrics          AgentMetrics[]
  transactions     Transaction[]
  userInteractions UserAgentInteraction[]
}

model Mandate {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("active")
  rulesJson Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String     @id @default(cuid())
  userId      String
  agentId     String
  amountCents Int
  currency    String     @default("USD")
  status      String     @default("pending")
  stripePi    String?
  requestJson Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  receiptJson Json?
  logs        AuditLog[]
  agent       Agent      @relation(fields: [agentId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model AuditLog {
  id          String      @id @default(cuid())
  txId        String
  actor       String
  createdAt   DateTime    @default(now())
  event       String
  payload     Json
  transaction Transaction @relation(fields: [txId], references: [id])
}

model AgentExecution {
  id              String    @id @default(cuid())
  agentId         String
  userId          String
  executionId     String    @unique
  status          String
  duration        Int
  creditsConsumed Int
  httpStatus      Int?
  errorCode       String?
  errorMessage    String?
  inputSize       Int?
  outputSize      Int?
  inputType       String?
  outputType      String?
  responseTime    Int?
  processingTime  Int?
  queueTime       Int?
  sessionId       String?
  userAgent       String?
  ipAddress       String?
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  agent           Agent     @relation(fields: [agentId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@index([agentId, createdAt])
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([executionId])
}

model AgentMetrics {
  id                     String   @id @default(cuid())
  agentId                String
  date                   DateTime
  hour                   Int?
  totalExecutions        Int      @default(0)
  successfulExecutions   Int      @default(0)
  failedExecutions       Int      @default(0)
  timeoutExecutions      Int      @default(0)
  errorExecutions        Int      @default(0)
  avgDuration            Float?
  minDuration            Int?
  maxDuration            Int?
  p95Duration            Int?
  p99Duration            Int?
  uniqueUsers            Int      @default(0)
  totalCreditsConsumed   Int      @default(0)
  avgCreditsPerExecution Float?
  errorCounts            Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  agent                  Agent    @relation(fields: [agentId], references: [id])

  @@unique([agentId, date, hour])
  @@index([agentId, date])
  @@index([date])
}

model AgentLog {
  id          String   @id @default(cuid())
  executionId String
  agentId     String
  userId      String
  category    String
  level       String
  message     String
  context     Json?
  metadata    Json?
  timestamp   DateTime @default(now())
  agent       Agent    @relation(fields: [agentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([executionId])
  @@index([agentId, timestamp])
  @@index([category, level, timestamp])
}

model UserAgentInteraction {
  id                   String    @id @default(cuid())
  userId               String
  agentId              String
  totalExecutions      Int       @default(0)
  successfulExecutions Int       @default(0)
  lastExecutedAt       DateTime?
  firstExecutedAt      DateTime?
  isFavorite           Boolean   @default(false)
  rating               Int?
  feedback             String?
  avgExecutionsPerDay  Float?
  preferredTimeOfDay   Int?
  preferredDayOfWeek   Int?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  agent                Agent     @relation(fields: [agentId], references: [id])
  user                 User      @relation(fields: [userId], references: [id])

  @@unique([userId, agentId])
  @@index([userId, lastExecutedAt])
  @@index([agentId, totalExecutions])
}

model RequestLog {
  id             String    @id @default(cuid())
  traceId        String    @unique
  method         String
  url            String
  path           String
  userAgent      String?
  ipAddress      String?
  userId         String?
  sessionId      String?
  requestHeaders Json?
  requestBody    Json?
  requestSize    Int?
  responseStatus Int?
  responseBody   Json?
  responseSize   Int?
  duration       Int
  errorCode      String?
  errorMessage   String?
  timestamp      DateTime  @default(now())

  @@index([traceId])
  @@index([method, path])
  @@index([userId, timestamp])
  @@index([errorCode, timestamp])
  @@index([timestamp])
}
